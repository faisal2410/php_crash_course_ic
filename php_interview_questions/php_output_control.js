// Question 1: What are some commonly used output control functions in PHP ?
    
// Explanation
// Some commonly used output control functions in PHP include ob_start(), ob_flush(), and ob_end_clean().The ob_start() function is used to start output buffering in PHP, capturing the output to a buffer instead of sending it directly to the browser.The ob_flush() function flushes the contents of the output buffer and sends it to the browser.The ob_end_clean() function discards the contents of the output buffer without sending it.These functions provide control over the output generation and manipulation in PHP scripts, allowing you to capture, modify, and control the final output sent to the client.
    
// Question 2: What function do you use in PHP to start output buffering ?
    
// Explanation
// In PHP, you can start output buffering using the ob_start() function. This function enables output buffering, capturing the output generated by PHP scripts and storing it in an internal buffer instead of immediately sending it to the client's browser. This provides the ability to manipulate the output, modify headers, and perform other operations before sending the final output to the browser. Using ob_start() is particularly useful when you need to conditionally modify or discard the output based on certain conditions or when you want to capture the output for further processing.

// Question 3: How do you handle errors when using output control functions in PHP ?
    
// Explanation
// When using output control functions in PHP, you can handle errors by checking the return values of the functions. Many PHP functions return false or other specific values to indicate an error. By checking these return values, you can detect errors and take appropriate actions, such as displaying an error message, logging the error, or executing alternative code paths. Additionally, you can use conditional statements and error handling techniques like try-catch blocks to handle exceptions that may occur during function execution. It's important to handle errors effectively to ensure proper program execution and provide a good user experience.